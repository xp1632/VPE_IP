{
    "description": "This is package description",
    "enable": true,
    "nodes": {
        "copy_img_CopyArrayImg": {
            "type": "copy_img_CopyArrayImg",
            "category": "function",
            "title": "copy_img_CopyArrayImg",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'copy.img'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After copy.img ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "copy_img_CopyImg": {
            "type": "copy_img_CopyImg",
            "category": "function",
            "title": "copy_img_CopyImg",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'copy.img'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After copy.img ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "copy_imgLabeling_CopyImgLabeling": {
            "type": "copy_imgLabeling_CopyImgLabeling",
            "category": "function",
            "title": "copy_imgLabeling_CopyImgLabeling",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'copy.imgLabeling'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After copy.imgLabeling ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "copy_iterableInterval_CopyII": {
            "type": "copy_iterableInterval_CopyII",
            "category": "function",
            "title": "copy_iterableInterval_CopyII",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'copy.iterableInterval'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After copy.iterableInterval ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "copy_rai_CopyRAI": {
            "type": "copy_rai_CopyRAI",
            "category": "function",
            "title": "copy_rai_CopyRAI",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'copy.rai'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After copy.rai ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        }
    }
}