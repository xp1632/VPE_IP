{
    "description": "This is package description",
    "enable": true,
    "nodes": {
        "threshold_huang_ComputeHuangThreshold": {
            "type": "threshold_huang_ComputeHuangThreshold",
            "category": "function",
            "title": "threshold_huang_ComputeHuangThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.huang'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.huang ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_huang_ApplyThresholdMethod$Huang": {
            "type": "threshold_huang_ApplyThresholdMethod$Huang",
            "category": "function",
            "title": "threshold_huang_ApplyThresholdMethod$Huang",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.huang'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.huang ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_huang_ApplyThresholdMethodLocal$LocalHuangThreshold": {
            "type": "threshold_huang_ApplyThresholdMethodLocal$LocalHuangThreshold",
            "category": "function",
            "title": "threshold_huang_ApplyThresholdMethodLocal$LocalHuangThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.huang'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.huang ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_ij1_ComputeIJ1Threshold": {
            "type": "threshold_ij1_ComputeIJ1Threshold",
            "category": "function",
            "title": "threshold_ij1_ComputeIJ1Threshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.ij1'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.ij1 ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_ij1_ApplyThresholdMethod$IJ1": {
            "type": "threshold_ij1_ApplyThresholdMethod$IJ1",
            "category": "function",
            "title": "threshold_ij1_ApplyThresholdMethod$IJ1",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.ij1'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.ij1 ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_ij1_ApplyThresholdMethodLocal$LocalIJ1Threshold": {
            "type": "threshold_ij1_ApplyThresholdMethodLocal$LocalIJ1Threshold",
            "category": "function",
            "title": "threshold_ij1_ApplyThresholdMethodLocal$LocalIJ1Threshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.ij1'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.ij1 ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_intermodes_ComputeIntermodesThreshold": {
            "type": "threshold_intermodes_ComputeIntermodesThreshold",
            "category": "function",
            "title": "threshold_intermodes_ComputeIntermodesThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.intermodes'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.intermodes ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_intermodes_ApplyThresholdMethod$Intermodes": {
            "type": "threshold_intermodes_ApplyThresholdMethod$Intermodes",
            "category": "function",
            "title": "threshold_intermodes_ApplyThresholdMethod$Intermodes",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.intermodes'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.intermodes ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_intermodes_ApplyThresholdMethodLocal$LocalIntermodesThreshold": {
            "type": "threshold_intermodes_ApplyThresholdMethodLocal$LocalIntermodesThreshold",
            "category": "function",
            "title": "threshold_intermodes_ApplyThresholdMethodLocal$LocalIntermodesThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.intermodes'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.intermodes ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_isoData_ComputeIsoDataThreshold": {
            "type": "threshold_isoData_ComputeIsoDataThreshold",
            "category": "function",
            "title": "threshold_isoData_ComputeIsoDataThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.isoData'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.isoData ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_isoData_ApplyThresholdMethod$IsoData": {
            "type": "threshold_isoData_ApplyThresholdMethod$IsoData",
            "category": "function",
            "title": "threshold_isoData_ApplyThresholdMethod$IsoData",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.isoData'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.isoData ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_isoData_ApplyThresholdMethodLocal$LocalIsoDataThreshold": {
            "type": "threshold_isoData_ApplyThresholdMethodLocal$LocalIsoDataThreshold",
            "category": "function",
            "title": "threshold_isoData_ApplyThresholdMethodLocal$LocalIsoDataThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.isoData'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.isoData ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_li_ComputeLiThreshold": {
            "type": "threshold_li_ComputeLiThreshold",
            "category": "function",
            "title": "threshold_li_ComputeLiThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.li'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.li ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_li_ApplyThresholdMethod$Li": {
            "type": "threshold_li_ApplyThresholdMethod$Li",
            "category": "function",
            "title": "threshold_li_ApplyThresholdMethod$Li",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.li'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.li ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_li_ApplyThresholdMethodLocal$LocalLiThreshold": {
            "type": "threshold_li_ApplyThresholdMethodLocal$LocalLiThreshold",
            "category": "function",
            "title": "threshold_li_ApplyThresholdMethodLocal$LocalLiThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.li'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.li ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localBernsenThreshold_LocalBernsenThreshold": {
            "type": "threshold_localBernsenThreshold_LocalBernsenThreshold",
            "category": "function",
            "title": "threshold_localBernsenThreshold_LocalBernsenThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localBernsenThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, ${inputs[3]}, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localBernsenThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localContrastThreshold_LocalContrastThreshold": {
            "type": "threshold_localContrastThreshold_LocalContrastThreshold",
            "category": "function",
            "title": "threshold_localContrastThreshold_LocalContrastThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localContrastThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localContrastThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localMeanThreshold_LocalMeanThreshold": {
            "type": "threshold_localMeanThreshold_LocalMeanThreshold",
            "category": "function",
            "title": "threshold_localMeanThreshold_LocalMeanThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localMeanThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localMeanThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localMeanThreshold_LocalMeanThresholdIntegral": {
            "type": "threshold_localMeanThreshold_LocalMeanThresholdIntegral",
            "category": "function",
            "title": "threshold_localMeanThreshold_LocalMeanThresholdIntegral",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localMeanThreshold'\\nRectangleShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.RectangleShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, RectangleShape(${inputs[2]},False), None, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localMeanThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "RectangleShape(range, False)": {
                    "title": "RectangleShape(range, False)",
                    "dataType": "integer",
                    "tooltip": "This is RectangleShape(range, False) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localMedianThreshold_LocalMedianThreshold": {
            "type": "threshold_localMedianThreshold_LocalMedianThreshold",
            "category": "function",
            "title": "threshold_localMedianThreshold_LocalMedianThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localMedianThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localMedianThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localMidGreyThreshold_LocalMidGreyThreshold": {
            "type": "threshold_localMidGreyThreshold_LocalMidGreyThreshold",
            "category": "function",
            "title": "threshold_localMidGreyThreshold_LocalMidGreyThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localMidGreyThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localMidGreyThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localNiblackThreshold_LocalNiblackThreshold": {
            "type": "threshold_localNiblackThreshold_LocalNiblackThreshold",
            "category": "function",
            "title": "threshold_localNiblackThreshold_LocalNiblackThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localNiblackThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, ${inputs[3]}, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localNiblackThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localNiblackThreshold_LocalNiblackThresholdIntegral": {
            "type": "threshold_localNiblackThreshold_LocalNiblackThresholdIntegral",
            "category": "function",
            "title": "threshold_localNiblackThreshold_LocalNiblackThresholdIntegral",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localNiblackThreshold'\\nRectangleShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.RectangleShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, RectangleShape(${inputs[2]},False), None, ${inputs[3]}, ${inputs[3]}))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localNiblackThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "RectangleShape(range, False)": {
                    "title": "RectangleShape(range, False)",
                    "dataType": "integer",
                    "tooltip": "This is RectangleShape(range, False) tooltip"
                },
                "float_para": {
                    "title": "float_para",
                    "dataType": "float",
                    "tooltip": "This is float_para tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localPhansalkarThreshold_LocalPhansalkarThreshold": {
            "type": "threshold_localPhansalkarThreshold_LocalPhansalkarThreshold",
            "category": "function",
            "title": "threshold_localPhansalkarThreshold_LocalPhansalkarThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localPhansalkarThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, None, None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localPhansalkarThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localPhansalkarThreshold_LocalPhansalkarThresholdIntegral": {
            "type": "threshold_localPhansalkarThreshold_LocalPhansalkarThresholdIntegral",
            "category": "function",
            "title": "threshold_localPhansalkarThreshold_LocalPhansalkarThresholdIntegral",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localPhansalkarThreshold'\\nRectangleShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.RectangleShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, RectangleShape(${inputs[2]},False), None, None, None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localPhansalkarThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "RectangleShape(range, False)": {
                    "title": "RectangleShape(range, False)",
                    "dataType": "integer",
                    "tooltip": "This is RectangleShape(range, False) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localSauvolaThreshold_LocalSauvolaThreshold": {
            "type": "threshold_localSauvolaThreshold_LocalSauvolaThreshold",
            "category": "function",
            "title": "threshold_localSauvolaThreshold_LocalSauvolaThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localSauvolaThreshold'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None, None, None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localSauvolaThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_localSauvolaThreshold_LocalSauvolaThresholdIntegral": {
            "type": "threshold_localSauvolaThreshold_LocalSauvolaThresholdIntegral",
            "category": "function",
            "title": "threshold_localSauvolaThreshold_LocalSauvolaThresholdIntegral",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.localSauvolaThreshold'\\nRectangleShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.RectangleShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, RectangleShape(${inputs[2]},False), None, None, None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.localSauvolaThreshold ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "RectangleShape(range, False)": {
                    "title": "RectangleShape(range, False)",
                    "dataType": "integer",
                    "tooltip": "This is RectangleShape(range, False) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_maxEntropy_ComputeMaxEntropyThreshold": {
            "type": "threshold_maxEntropy_ComputeMaxEntropyThreshold",
            "category": "function",
            "title": "threshold_maxEntropy_ComputeMaxEntropyThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.maxEntropy'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.maxEntropy ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_maxEntropy_ApplyThresholdMethod$MaxEntropy": {
            "type": "threshold_maxEntropy_ApplyThresholdMethod$MaxEntropy",
            "category": "function",
            "title": "threshold_maxEntropy_ApplyThresholdMethod$MaxEntropy",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.maxEntropy'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.maxEntropy ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_maxEntropy_ApplyThresholdMethodLocal$LocalMaxEntropyThreshold": {
            "type": "threshold_maxEntropy_ApplyThresholdMethodLocal$LocalMaxEntropyThreshold",
            "category": "function",
            "title": "threshold_maxEntropy_ApplyThresholdMethodLocal$LocalMaxEntropyThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.maxEntropy'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.maxEntropy ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_maxLikelihood_ComputeMaxLikelihoodThreshold": {
            "type": "threshold_maxLikelihood_ComputeMaxLikelihoodThreshold",
            "category": "function",
            "title": "threshold_maxLikelihood_ComputeMaxLikelihoodThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.maxLikelihood'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.maxLikelihood ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_maxLikelihood_ApplyThresholdMethod$MaxLikelihood": {
            "type": "threshold_maxLikelihood_ApplyThresholdMethod$MaxLikelihood",
            "category": "function",
            "title": "threshold_maxLikelihood_ApplyThresholdMethod$MaxLikelihood",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.maxLikelihood'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.maxLikelihood ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_maxLikelihood_ApplyThresholdMethodLocal$LocalMaxLikelihoodThreshold": {
            "type": "threshold_maxLikelihood_ApplyThresholdMethodLocal$LocalMaxLikelihoodThreshold",
            "category": "function",
            "title": "threshold_maxLikelihood_ApplyThresholdMethodLocal$LocalMaxLikelihoodThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.maxLikelihood'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.maxLikelihood ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_mean_ComputeMeanThreshold": {
            "type": "threshold_mean_ComputeMeanThreshold",
            "category": "function",
            "title": "threshold_mean_ComputeMeanThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.mean'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.mean ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_mean_ApplyThresholdMethod$Mean": {
            "type": "threshold_mean_ApplyThresholdMethod$Mean",
            "category": "function",
            "title": "threshold_mean_ApplyThresholdMethod$Mean",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.mean'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.mean ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_minError_ComputeMinErrorThreshold": {
            "type": "threshold_minError_ComputeMinErrorThreshold",
            "category": "function",
            "title": "threshold_minError_ComputeMinErrorThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.minError'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.minError ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_minError_ApplyThresholdMethod$MinError": {
            "type": "threshold_minError_ApplyThresholdMethod$MinError",
            "category": "function",
            "title": "threshold_minError_ApplyThresholdMethod$MinError",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.minError'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.minError ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_minError_ApplyThresholdMethodLocal$LocalMinErrorThreshold": {
            "type": "threshold_minError_ApplyThresholdMethodLocal$LocalMinErrorThreshold",
            "category": "function",
            "title": "threshold_minError_ApplyThresholdMethodLocal$LocalMinErrorThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.minError'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.minError ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_minimum_ComputeMinimumThreshold": {
            "type": "threshold_minimum_ComputeMinimumThreshold",
            "category": "function",
            "title": "threshold_minimum_ComputeMinimumThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.minimum'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.minimum ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_minimum_ApplyThresholdMethod$Minimum": {
            "type": "threshold_minimum_ApplyThresholdMethod$Minimum",
            "category": "function",
            "title": "threshold_minimum_ApplyThresholdMethod$Minimum",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.minimum'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.minimum ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_minimum_ApplyThresholdMethodLocal$LocalMinimumThreshold": {
            "type": "threshold_minimum_ApplyThresholdMethodLocal$LocalMinimumThreshold",
            "category": "function",
            "title": "threshold_minimum_ApplyThresholdMethodLocal$LocalMinimumThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.minimum'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.minimum ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_moments_ComputeMomentsThreshold": {
            "type": "threshold_moments_ComputeMomentsThreshold",
            "category": "function",
            "title": "threshold_moments_ComputeMomentsThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.moments'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.moments ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_moments_ApplyThresholdMethod$Moments": {
            "type": "threshold_moments_ApplyThresholdMethod$Moments",
            "category": "function",
            "title": "threshold_moments_ApplyThresholdMethod$Moments",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.moments'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.moments ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_moments_ApplyThresholdMethodLocal$LocalMomentsThreshold": {
            "type": "threshold_moments_ApplyThresholdMethodLocal$LocalMomentsThreshold",
            "category": "function",
            "title": "threshold_moments_ApplyThresholdMethodLocal$LocalMomentsThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.moments'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.moments ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_otsu_ComputeOtsuThreshold": {
            "type": "threshold_otsu_ComputeOtsuThreshold",
            "category": "function",
            "title": "threshold_otsu_ComputeOtsuThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.otsu'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.otsu ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_otsu_ApplyThresholdMethod$Otsu": {
            "type": "threshold_otsu_ApplyThresholdMethod$Otsu",
            "category": "function",
            "title": "threshold_otsu_ApplyThresholdMethod$Otsu",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.otsu'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.otsu ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_otsu_ApplyThresholdMethodLocal$LocalOtsuThreshold": {
            "type": "threshold_otsu_ApplyThresholdMethodLocal$LocalOtsuThreshold",
            "category": "function",
            "title": "threshold_otsu_ApplyThresholdMethodLocal$LocalOtsuThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.otsu'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.otsu ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_percentile_ComputePercentileThreshold": {
            "type": "threshold_percentile_ComputePercentileThreshold",
            "category": "function",
            "title": "threshold_percentile_ComputePercentileThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.percentile'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.percentile ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_percentile_ApplyThresholdMethod$Percentile": {
            "type": "threshold_percentile_ApplyThresholdMethod$Percentile",
            "category": "function",
            "title": "threshold_percentile_ApplyThresholdMethod$Percentile",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.percentile'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.percentile ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_percentile_ApplyThresholdMethodLocal$LocalPercentileThreshold": {
            "type": "threshold_percentile_ApplyThresholdMethodLocal$LocalPercentileThreshold",
            "category": "function",
            "title": "threshold_percentile_ApplyThresholdMethodLocal$LocalPercentileThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.percentile'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.percentile ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_renyiEntropy_ComputeRenyiEntropyThreshold": {
            "type": "threshold_renyiEntropy_ComputeRenyiEntropyThreshold",
            "category": "function",
            "title": "threshold_renyiEntropy_ComputeRenyiEntropyThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.renyiEntropy'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.renyiEntropy ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_renyiEntropy_ApplyThresholdMethod$RenyiEntropy": {
            "type": "threshold_renyiEntropy_ApplyThresholdMethod$RenyiEntropy",
            "category": "function",
            "title": "threshold_renyiEntropy_ApplyThresholdMethod$RenyiEntropy",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.renyiEntropy'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.renyiEntropy ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_renyiEntropy_ApplyThresholdMethodLocal$LocalRenyiEntropyThreshold": {
            "type": "threshold_renyiEntropy_ApplyThresholdMethodLocal$LocalRenyiEntropyThreshold",
            "category": "function",
            "title": "threshold_renyiEntropy_ApplyThresholdMethodLocal$LocalRenyiEntropyThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.renyiEntropy'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.renyiEntropy ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_rosin_ComputeRosinThreshold": {
            "type": "threshold_rosin_ComputeRosinThreshold",
            "category": "function",
            "title": "threshold_rosin_ComputeRosinThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.rosin'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.rosin ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_rosin_ApplyThresholdMethod$Rosin": {
            "type": "threshold_rosin_ApplyThresholdMethod$Rosin",
            "category": "function",
            "title": "threshold_rosin_ApplyThresholdMethod$Rosin",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.rosin'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.rosin ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_rosin_ApplyThresholdMethodLocal$LocalRosinThreshold": {
            "type": "threshold_rosin_ApplyThresholdMethodLocal$LocalRosinThreshold",
            "category": "function",
            "title": "threshold_rosin_ApplyThresholdMethodLocal$LocalRosinThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.rosin'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.rosin ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_shanbhag_ComputeShanbhagThreshold": {
            "type": "threshold_shanbhag_ComputeShanbhagThreshold",
            "category": "function",
            "title": "threshold_shanbhag_ComputeShanbhagThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.shanbhag'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.shanbhag ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_shanbhag_ApplyThresholdMethod$Shanbhag": {
            "type": "threshold_shanbhag_ApplyThresholdMethod$Shanbhag",
            "category": "function",
            "title": "threshold_shanbhag_ApplyThresholdMethod$Shanbhag",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.shanbhag'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.shanbhag ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_shanbhag_ApplyThresholdMethodLocal$LocalShanbhagThreshold": {
            "type": "threshold_shanbhag_ApplyThresholdMethodLocal$LocalShanbhagThreshold",
            "category": "function",
            "title": "threshold_shanbhag_ApplyThresholdMethodLocal$LocalShanbhagThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.shanbhag'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.shanbhag ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_triangle_ComputeTriangleThreshold": {
            "type": "threshold_triangle_ComputeTriangleThreshold",
            "category": "function",
            "title": "threshold_triangle_ComputeTriangleThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.triangle'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.triangle ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_triangle_ApplyThresholdMethod$Triangle": {
            "type": "threshold_triangle_ApplyThresholdMethod$Triangle",
            "category": "function",
            "title": "threshold_triangle_ApplyThresholdMethod$Triangle",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.triangle'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.triangle ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_triangle_ApplyThresholdMethodLocal$LocalTriangleThreshold": {
            "type": "threshold_triangle_ApplyThresholdMethodLocal$LocalTriangleThreshold",
            "category": "function",
            "title": "threshold_triangle_ApplyThresholdMethodLocal$LocalTriangleThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.triangle'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.triangle ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_yen_ComputeYenThreshold": {
            "type": "threshold_yen_ComputeYenThreshold",
            "category": "function",
            "title": "threshold_yen_ComputeYenThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.yen'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.yen ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_yen_ApplyThresholdMethod$Yen": {
            "type": "threshold_yen_ApplyThresholdMethod$Yen",
            "category": "function",
            "title": "threshold_yen_ApplyThresholdMethod$Yen",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.yen'\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(None, process_image))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.yen ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        },
        "threshold_yen_ApplyThresholdMethodLocal$LocalYenThreshold": {
            "type": "threshold_yen_ApplyThresholdMethodLocal$LocalYenThreshold",
            "category": "function",
            "title": "threshold_yen_ApplyThresholdMethodLocal$LocalYenThreshold",
            "tooltip": "This is node tooltip",
            "externalImports": "import imagej\nimport scyjava as sj\nij = imagej.init('sc.fiji:fiji:2.14.0')",
            "codeGenerator": "function code(inputs, outputs, node, generator) {\n          const code = `#Get input image\\nvp_input_image = ${inputs[1]}\\nprocess_image = vp_input_image.get('value')\\nOp_name = 'threshold.yen'\\nHyperSphereShape = sj.jimport(\"net.imglib2.algorithm.neighborhood.HyperSphereShape\")\\njimage = ij.py.to_java(process_image)\\n${outputs[1]} = ij.op().run('create.img',jimage)\\n${outputs[1]}= ij.op().run(Op_name, ij.py.jargs(${outputs[1]}, process_image, HyperSphereShape(${inputs[2]}), None))\\n${outputs[1]} = ij.py.from_java(${outputs[1]})\\n${outputs[1]} = ((${outputs[1]} - ${outputs[1]}.min()) / (${outputs[1]}.max() - ${outputs[1]}.min())* 255).astype('uint8')\\ndef image_info(image):\\n    print(\"--- After threshold.yen ---\")\\n    ij.py.show(image)\\n    print(f\" type: {type(image)}\")\\n    print(f\"dtype: {image.dtype if hasattr(image, 'dtype') else 'N/A'}\")\\n    print(f\"shape: {image.shape}\")\\n    print (\"--------------------------------\")\\nimage_info(${outputs[1]});\\n${outputs[1]} = {\\n  'value': ${outputs[1]},\\n  'dataType': 'numpy.ndarray',\\n  'metadata': {\\n    'colorChannel': 'grayscale',\\n    'channelOrder': 'channelLast',\\n    'isMiniBatched': False,\\n    'intensityRange': '0-255',\\n    'device': 'cpu'\\n  }\\n}\\n${outputs[0]}`;\n          return code;\n        }",
            "inputs": {
                "execIn": {
                    "title": "execIn",
                    "tooltip": "execIn",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "input_image": {
                    "title": "process_image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray",
                        "metadata": [
                            {
                                "colorChannel": "grayscale",
                                "isMiniBatched": false,
                                "channelOrder": "channelLast",
                                "intensityRange": [
                                    "0-255"
                                ],
                                "device": [
                                    "cpu"
                                ]
                            }
                        ]
                    },
                    "tooltip": "input image."
                },
                "HyperSphereShape(range)": {
                    "title": "HyperSphereShape(range)",
                    "dataType": "integer",
                    "tooltip": "This is HyperSphereShape(range) tooltip"
                }
            },
            "outputs": {
                "execOut": {
                    "title": "execOut",
                    "tooltip": "execOut",
                    "dataType": "exec",
                    "showWidget": false,
                    "showTitle": false
                },
                "output_image": {
                    "title": "image",
                    "dataType": "image",
                    "defaultValue": {
                        "dataType": "numpy.ndarray"
                    },
                    "tooltip": "{dataType: numpy.ndarray, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
                }
            }
        }
    }
}